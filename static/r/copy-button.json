{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "copy-button",
	"type": "registry:ui",
	"devDependencies": [
		"@lucide/svelte@^0.544.0",
		"bits-ui@^2.11.3",
		"@internationalized/date@^3.9.0"
	],
	"registryDependencies": [
		"button"
	],
	"files": [
		{
			"content": "import CopyButton from './copy-button.svelte';\n\nexport { CopyButton };\n",
			"type": "registry:file",
			"target": "copy-button/index.ts"
		},
		{
			"content": "<script lang=\"ts\">\n    import { Button } from '$lib/components/ui/button';\n    import { UseClipboard } from '$HOOKS$/use-clipboard.svelte';\n    import { cn } from '$UTILS$';\n    import CheckIcon from '@lucide/svelte/icons/check';\n    import CopyIcon from '@lucide/svelte/icons/copy';\n    import XIcon from '@lucide/svelte/icons/x';\n    import { scale } from 'svelte/transition';\n    import type { CopyButtonProps } from './types';\n\n    let {\n        ref = $bindable(null),\n        text,\n        icon,\n        animationDuration = 500,\n        variant = 'ghost',\n        size = 'icon',\n        onCopy,\n        class: className,\n        tabindex = -1,\n        children,\n        ...rest\n    }: CopyButtonProps = $props();\n\n    // this way if the user passes text then the button will be the default size\n    if (size === 'icon' && children) {\n        size = 'default';\n    }\n\n    const clipboard = new UseClipboard();\n</script>\n\n<Button\n    {...rest}\n    bind:ref\n    {variant}\n    {size}\n    {tabindex}\n    class={cn('flex items-center gap-2', className)}\n    type=\"button\"\n    name=\"copy\"\n    onclick={async () => {\n        const status = await clipboard.copy(text);\n        onCopy?.(status);\n    }}\n>\n    {#if clipboard.status === 'success'}\n        <div in:scale={{ duration: animationDuration, start: 0.85 }}>\n            <CheckIcon tabindex={-1} />\n            <span class=\"sr-only\">Copied</span>\n        </div>\n    {:else if clipboard.status === 'failure'}\n        <div in:scale={{ duration: animationDuration, start: 0.85 }}>\n            <XIcon tabindex={-1} />\n            <span class=\"sr-only\">Failed to copy</span>\n        </div>\n    {:else}\n        <div in:scale={{ duration: animationDuration, start: 0.85 }}>\n            {#if icon}\n                {@render icon()}\n            {:else}\n                <CopyIcon tabindex={-1} />\n            {/if}\n            <span class=\"sr-only\">Copy</span>\n        </div>\n    {/if}\n    {@render children?.()}\n</Button>\n",
			"type": "registry:file",
			"target": "copy-button/copy-button.svelte"
		},
		{
			"content": "import type { Snippet } from 'svelte';\nimport type { UseClipboard } from '$lib/hooks/use-clipboard.svelte';\nimport type { HTMLAnchorAttributes, HTMLAttributes, HTMLButtonAttributes } from 'svelte/elements';\nimport type { WithChildren, WithoutChildren } from 'bits-ui';\nimport type { WithElementRef } from '$UTILS$';\nimport type { ButtonSize, ButtonVariant } from '$lib/components/ui/button';\n\nexport type CopyButtonPropsWithoutHTML = WithChildren<\n\tWithElementRef<HTMLButtonAttributes> &\n\tWithElementRef<HTMLAnchorAttributes> & {\n\t\tvariant?: ButtonVariant;\n\t\tsize?: ButtonSize;\n\t} & {\n\t\tref?: HTMLButtonElement | null;\n\t\ttext: string;\n\t\ticon?: Snippet<[]>;\n\t\tanimationDuration?: number;\n\t\tonCopy?: (status: UseClipboard['status']) => void;\n\t}\n>;\n\nexport type CopyButtonProps = CopyButtonPropsWithoutHTML &\n\tWithoutChildren<HTMLAttributes<HTMLButtonElement>>;\n",
			"type": "registry:file",
			"target": "copy-button/types.ts"
		},
		{
			"content": "type Options = {\n\t/** The time before the copied status is reset. */\n\tdelay: number;\n};\n\n/** Use this hook to copy text to the clipboard and show a copied state.\n *\n * ## Usage\n * ```svelte\n * <script lang=\"ts\">\n * \t\timport { UseClipboard } from \"$lib/hooks/use-clipboard.svelte\";\n *\n * \t\tconst clipboard = new UseClipboard();\n * </script>\n *\n * <button onclick={clipboard.copy('Hello, World!')}>\n *     {#if clipboard.copied === 'success'}\n *         Copied!\n *     {:else if clipboard.copied === 'failure'}\n *         Failed to copy!\n *     {:else}\n *         Copy\n *     {/if}\n * </button>\n * ```\n *\n */\nexport class UseClipboard {\n\t#copiedStatus = $state<'success' | 'failure'>();\n\tprivate delay: number;\n\tprivate timeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n\tconstructor({ delay = 500 }: Partial<Options> = {}) {\n\t\tthis.delay = delay;\n\t}\n\n\t/** Copies the given text to the users clipboard.\n\t *\n\t * ## Usage\n\t * ```ts\n\t * clipboard.copy('Hello, World!');\n\t * ```\n\t *\n\t * @param text\n\t * @returns\n\t */\n\tasync copy(text: string) {\n\t\tif (this.timeout) {\n\t\t\tthis.#copiedStatus = undefined;\n\t\t\tclearTimeout(this.timeout);\n\t\t}\n\n\t\ttry {\n\t\t\tawait navigator.clipboard.writeText(text);\n\n\t\t\tthis.#copiedStatus = 'success';\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.#copiedStatus = undefined;\n\t\t\t}, this.delay);\n\t\t} catch {\n\t\t\t// an error can occur when not in the browser or if the user hasn't given clipboard access\n\t\t\tthis.#copiedStatus = 'failure';\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.#copiedStatus = undefined;\n\t\t\t}, this.delay);\n\t\t}\n\n\t\treturn this.#copiedStatus;\n\t}\n\n\t/** true when the user has just copied to the clipboard. */\n\tget copied() {\n\t\treturn this.#copiedStatus === 'success';\n\t}\n\n\t/**\tIndicates whether a copy has occurred\n\t * and gives a status of either `success` or `failure`. */\n\tget status() {\n\t\treturn this.#copiedStatus;\n\t}\n}\n",
			"type": "registry:hook",
			"target": "use-clipboard.svelte.ts"
		}
	]
}
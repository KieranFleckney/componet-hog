{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "password-field",
	"type": "registry:ui",
	"registryDependencies": [
		"./generic-field.json",
		"./password.json"
	],
	"files": [
		{
			"content": "export { default as PasswordInput } from './password-input.svelte';",
			"type": "registry:file",
			"target": "password-field/index.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T\">\n    import type { BaseInputProps } from '$UI$/form';\n    import { GenericInput } from '$UI$/form-fields/generic-field';\n    import * as Password from '$UI$/password';\n    import type { HTMLInputAttributes } from 'svelte/elements';\n\n    type Props = Omit<HTMLInputAttributes, 'type'> & {\n        type?: 'password';\n        files?: undefined;\n    };\n\n    let {\n        property,\n        context,\n        ref = $bindable(null),\n        value = $bindable(),\n        type,\n        class: className,\n        showStrength = false,\n        ...restProps\n    }: {\n        ref?: HTMLInputElement | null;\n        showStrength?: boolean;\n    } & BaseInputProps<T> &\n        Props = $props();\n</script>\n\n<GenericInput {property} {context} {...restProps}>\n    {#snippet control(field)}\n        <Password.Root>\n            <Password.Input\n                bind:ref\n                name={field.name}\n                id={field.name}\n                bind:value={\n                    () => field.state.value, (e) => field.handleChange(e)\n                }\n                onblur={field.handleBlur}\n                aria-invalid={field.state.meta.isValid ? undefined : 'true'}\n            >\n                <Password.ToggleVisibility />\n            </Password.Input>\n            {#if showStrength}\n                <Password.Strength />\n            {/if}\n        </Password.Root>\n    {/snippet}\n</GenericInput>\n",
			"type": "registry:file",
			"target": "password-field/password-input.svelte"
		}
	]
}
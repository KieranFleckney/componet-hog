{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "data-grid",
	"type": "registry:ui",
	"devDependencies": [
		"@tanstack/table-core@^8.21.3",
		"@lucide/svelte@^0.515.0"
	],
	"registryDependencies": [
		"data-table",
		"button",
		"select",
		"dropdown-menu",
		"checkbox",
		"table"
	],
	"files": [
		{
			"content": "export { default as DataTable } from './data-grid.svelte';\nexport { default as ActionColumn } from './action-column.svelte';\nexport { default as SelectColumn } from './select-column.svelte';\nexport { default as PropertyColumn } from './property-column.svelte';\nexport { default as Pager } from './data-grid-pagination.svelte';\nexport { default as VisibilityButton } from './data-grid-column-visibility.svelte';\n",
			"type": "registry:file",
			"target": "data-grid/index.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends object\">\n    import { setContext, type Snippet } from 'svelte';\n    import {\n        DATA_GRID_CONTEXT,\n        DataTableContext,\n    } from './data-grid-context.svelte';\n    import DataTableCore from './data-grid-core.svelte';\n    import type { FilterFnOption, Table } from '@tanstack/table-core';\n\n    interface DataGridProps {\n        context?: DataTableContext<T>;\n        items: T[];\n        columns: Snippet<[DataTableContext<T>]>;\n        tool?: Snippet<[Table<T>]>;\n        pager?: Snippet<[Table<T>]>;\n        globalFilterFn?: FilterFnOption<T>;\n        showSortOrder?: boolean;\n    }\n\n    let {\n        items,\n        columns,\n        showSortOrder,\n        tool,\n        pager,\n        context,\n        globalFilterFn,\n    }: DataGridProps = $props();\n\n    const tableContext = $state(context ?? new DataTableContext<T>());\n    setContext(DATA_GRID_CONTEXT, tableContext);\n\n    $effect(() => {\n        tableContext.data = [...items];\n        tableContext.showSortOrder = showSortOrder;\n        tableContext.toolBar = tool;\n        tableContext.pager = pager;\n        tableContext.globalFilterFn = globalFilterFn;\n    });\n\n    export { tableContext as Context };\n</script>\n\n<DataTableCore c={tableContext} />\n{@render columns?.(tableContext)}\n",
			"type": "registry:file",
			"target": "data-grid/data-grid.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends object\">\n    import { DataTableContext } from './data-grid-context.svelte';\n    import * as Table from '$lib/components/ui/table/index.js';\n    import {\n        createSvelteTable,\n        FlexRender,\n    } from '$lib/components/ui/data-table';\n    import {\n        getCoreRowModel,\n        getFacetedMinMaxValues,\n        getFacetedRowModel,\n        getFacetedUniqueValues,\n        getFilteredRowModel,\n        getPaginationRowModel,\n        getSortedRowModel,\n        type TableOptions,\n        type Table as TanTable,\n    } from '@tanstack/table-core';\n\n    interface DataGridProps {\n        c: DataTableContext<T>;\n    }\n\n    let { c }: DataGridProps = $props();\n    let table = $state(CreateTable());\n    c.GetTable = () => table;\n\n    $effect(() => {\n        table = CreateTable();\n        c.GetTable = () => table;\n    });\n\n    function CreateTable(): TanTable<T> {\n        $inspect.trace();\n        const options: TableOptions<T> = {\n            get data() {\n                return c.data;\n            },\n            state: {\n                get sorting() {\n                    return c.sorting;\n                },\n                get columnVisibility() {\n                    return c.columnVisibility;\n                },\n                get rowSelection() {\n                    return c.rowSelection;\n                },\n                get columnFilters() {\n                    return c.columnFilters;\n                },\n                get pagination() {\n                    return c.pagination;\n                },\n                get globalFilter() {\n                    return c.globalFilters;\n                },\n            },\n            columns: c.columnDefs,\n            onRowSelectionChange: (updater) => {\n                if (typeof updater === 'function') {\n                    c.rowSelection = updater(c.rowSelection);\n                } else {\n                    c.rowSelection = updater;\n                }\n            },\n            onSortingChange: (updater) => {\n                if (typeof updater === 'function') {\n                    c.sorting = updater(c.sorting);\n                } else {\n                    c.sorting = updater;\n                }\n            },\n            onColumnFiltersChange: (updater) => {\n                if (typeof updater === 'function') {\n                    c.columnFilters = updater(c.columnFilters);\n                } else {\n                    c.columnFilters = updater;\n                }\n            },\n            onGlobalFilterChange: (updater) => {\n                console.log('dd');\n                if (typeof updater === 'function') {\n                    c.globalFilters = updater(c.globalFilters);\n                } else {\n                    c.globalFilters = updater;\n                }\n            },\n            onColumnVisibilityChange: (updater) => {\n                if (typeof updater === 'function') {\n                    c.columnVisibility = updater(c.columnVisibility);\n                } else {\n                    c.columnVisibility = updater;\n                }\n            },\n            onPaginationChange: (updater) => {\n                if (typeof updater === 'function') {\n                    c.pagination = updater(c.pagination);\n                } else {\n                    c.pagination = updater;\n                }\n            },\n            getCoreRowModel: getCoreRowModel(),\n            getFilteredRowModel: getFilteredRowModel(),\n            // getPaginationRowModel: getPaginationRowModel(),\n            getSortedRowModel: getSortedRowModel(),\n            getFacetedRowModel: getFacetedRowModel(),\n            getFacetedUniqueValues: getFacetedUniqueValues(),\n            getFacetedMinMaxValues: getFacetedMinMaxValues(),\n            enableColumnFilters: true,\n            enableFilters: true,\n            enableSorting: true,\n            enableMultiSort: true,\n        };\n\n        if (c.showSortOrder !== undefined) {\n            options.meta = {\n                showSortOrder: c.showSortOrder,\n            };\n        }\n\n        if (c.enablePaging) {\n            options.getPaginationRowModel = getPaginationRowModel();\n        }\n\n        if (c.globalFilterFn) {\n            options.enableGlobalFilter = true;\n            options.globalFilterFn = c.globalFilterFn;\n        }\n\n        return createSvelteTable(options);\n    }\n</script>\n\n<div class=\"space-y-4\">\n    {#if c.toolBar}\n        <div class=\"flex items-center justify-between\">\n            {@render c.toolBar?.(table)}\n        </div>\n    {/if}\n    <div class=\"rounded-md border overflow-hidden\">\n        <Table.Root>\n            <Table.Header>\n                {#each table.getHeaderGroups() as headerGroup (headerGroup.id)}\n                    <Table.Row>\n                        {#each headerGroup.headers as header (header.id)}\n                            <Table.Head colspan={header.colSpan}>\n                                {#if !header.isPlaceholder}\n                                    <FlexRender\n                                        content={header.column.columnDef.header}\n                                        context={header.getContext()}\n                                    />\n                                {/if}\n                            </Table.Head>\n                        {/each}\n                    </Table.Row>\n                {/each}\n            </Table.Header>\n            <Table.Body>\n                {#each table.getRowModel().rows as row (row.id)}\n                    <Table.Row data-state={row.getIsSelected() && 'selected'}>\n                        {#each row.getVisibleCells() as cell (cell.id)}\n                            <Table.Cell class={cell.column.columnDef.meta}>\n                                <FlexRender\n                                    content={cell.column.columnDef.cell}\n                                    context={cell.getContext()}\n                                />\n                            </Table.Cell>\n                        {/each}\n                    </Table.Row>\n                {:else}\n                    <Table.Row>\n                        <Table.Cell\n                            colspan={table.options.columns.length}\n                            class=\"h-24 text-center\">No results.</Table.Cell\n                        >\n                    </Table.Row>\n                {/each}\n            </Table.Body>\n        </Table.Root>\n    </div>\n    {#if c.pager}\n        {@render c.pager?.(table)}\n    {/if}\n</div>\n",
			"type": "registry:file",
			"target": "data-grid/data-grid-core.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends object\">\n\timport ChevronRightIcon from '@lucide/svelte/icons/chevron-right';\n\timport ChevronLeftIcon from '@lucide/svelte/icons/chevron-left';\n\timport ChevronsLeftIcon from '@lucide/svelte/icons/chevrons-left';\n\timport ChevronsRightIcon from '@lucide/svelte/icons/chevrons-right';\n\timport { Button } from '$lib/components/ui/button';\n\timport * as Select from '$lib/components/ui/select';\n\timport { getContext, onDestroy, untrack } from 'svelte';\n\timport type { Table } from '@tanstack/table-core';\n\timport { DATA_GRID_CONTEXT, DataTableContext } from './data-grid-context.svelte';\n\n\ttype Props<T extends object> = {\n\t\ttable: Table<T>;\n\t\tpageSizeOptions?: number[];\n\t\tshowPageNumber?: boolean;\n\t\tshowSizeOptions?: boolean;\n\t\tshowSelected?: boolean;\n\t};\n\n\tlet {\n\t\ttable,\n\t\tpageSizeOptions = [10, 25, 50, 100],\n\t\tshowPageNumber = true,\n\t\tshowSizeOptions = true,\n\t\tshowSelected = true\n\t}: Props<T> = $props();\n\n\tconst context = getContext(DATA_GRID_CONTEXT) as DataTableContext<T>;\n\ttable.setPageSize(Number(pageSizeOptions[0] ?? 10));\n\n\t$effect(() => {\n\t\tcontext.enablePaging = true;\n\t});\n\n\tonDestroy(() => {\n\t\tcontext.enablePaging = false;\n\t});\n</script>\n\n<div class=\"flex items-center justify-between px-2\">\n\t<div class=\"flex-1 text-sm text-muted-foreground\">\n\t\t{#if showSelected}\n\t\t\t{table.getFilteredSelectedRowModel().rows.length} of\n\t\t\t{table.getFilteredRowModel().rows.length} row(s) selected.\n\t\t{/if}\n\t</div>\n\t<div class=\"flex items-center space-x-6 lg:space-x-8\">\n\t\t{#if showSizeOptions}\n\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t<p class=\"text-sm font-medium\">Rows per page</p>\n\t\t\t\t<Select.Root\n\t\t\t\t\tallowDeselect={false}\n\t\t\t\t\ttype=\"single\"\n\t\t\t\t\tvalue={`${table.getState().pagination.pageSize}`}\n\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\ttable.setPageSize(Number(value));\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Select.Trigger class=\"h-8 w-[70px]\">\n\t\t\t\t\t\t{String(table.getState().pagination.pageSize)}\n\t\t\t\t\t</Select.Trigger>\n\t\t\t\t\t<Select.Content side=\"top\">\n\t\t\t\t\t\t{#each pageSizeOptions as pageSize (pageSize)}\n\t\t\t\t\t\t\t<Select.Item value={`${pageSize}`}>\n\t\t\t\t\t\t\t\t{pageSize}\n\t\t\t\t\t\t\t</Select.Item>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Select.Content>\n\t\t\t\t</Select.Root>\n\t\t\t</div>\n\t\t{/if}\n\t\t{#if showPageNumber}\n\t\t\t<div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n\t\t\t\tPage {table.getState().pagination.pageIndex + 1} of\n\t\t\t\t{table.getPageCount()}\n\t\t\t</div>\n\t\t{/if}\n\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t<Button\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\tonclick={() => table.setPageIndex(0)}\n\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t>\n\t\t\t\t<span class=\"sr-only\">Go to first page</span>\n\t\t\t\t<ChevronsLeftIcon />\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\tonclick={() => table.previousPage()}\n\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t>\n\t\t\t\t<span class=\"sr-only\">Go to previous page</span>\n\t\t\t\t<ChevronLeftIcon />\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\tonclick={() => table.nextPage()}\n\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t>\n\t\t\t\t<span class=\"sr-only\">Go to next page</span>\n\t\t\t\t<ChevronRightIcon />\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\tonclick={() => table.setPageIndex(table.getPageCount() - 1)}\n\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t>\n\t\t\t\t<span class=\"sr-only\">Go to last page</span>\n\t\t\t\t<ChevronsRightIcon />\n\t\t\t</Button>\n\t\t</div>\n\t</div>\n</div>\n",
			"type": "registry:file",
			"target": "data-grid/data-grid-pagination.svelte"
		},
		{
			"content": "import {\n    type ColumnDef,\n    type ColumnFiltersState,\n    type FilterFnOption,\n    type GlobalFilterTableState,\n    type PaginationState,\n    type RowData,\n    type RowSelectionState,\n    type SortingState,\n    type Table,\n    type VisibilityState,\n} from '@tanstack/table-core';\nimport type { Snippet } from 'svelte';\nimport { SvelteMap } from 'svelte/reactivity';\n\nexport const DATA_GRID_CONTEXT = Symbol('data-grid-context');\n\nexport class DataTableContext<T extends RowData> {\n    public data: T[] = $state([]);\n    public columnDefMap = new SvelteMap<string, ColumnDef<T>>();\n    public columnDefs: ColumnDef<T>[] = $derived(\n        Array.from(this.columnDefMap, (x) => x[1])\n    );\n    public rowSelection = $state<RowSelectionState>({});\n    public columnVisibility = $state<VisibilityState>({});\n    public columnFilters = $state<ColumnFiltersState>([]);\n    public globalFilters = $state<any>(undefined);\n    public sorting = $state<SortingState>([]);\n    public pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n\n    public showSortOrder? = $state(false);\n    public toolBar?: Snippet<[Table<T>]> = $state(undefined);\n\n    public enablePaging = $state(false);\n    public pager?: Snippet<[Table<T>]> = $state(undefined);\n\n    public globalFilterFn?: FilterFnOption<T> = $state(undefined);\n\n    public GetTable?: () => Table<T> = $state(undefined);\n    public Table? = $derived(this.GetTable?.());\n}\n\ndeclare module '@tanstack/table-core' {\n    interface TableMeta<TData extends RowData> {\n        showSortOrder: boolean;\n    }\n}\n",
			"type": "registry:file",
			"target": "data-grid/data-grid-context.svelte.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n    import Settings2Icon from '@lucide/svelte/icons/settings-2';\n    import type { Table } from '@tanstack/table-core';\n    import { buttonVariants } from '$lib/components/ui/button';\n    import * as DropdownMenu from '$lib/components/ui/dropdown-menu';\n\n    let { table }: { table: Table<TData> } = $props();\n</script>\n\n<DropdownMenu.Root>\n    <DropdownMenu.Trigger\n        class={buttonVariants({\n            variant: 'outline',\n            size: 'sm',\n            class: 'h-8 flex',\n        })}\n    >\n        <Settings2Icon />\n        View\n    </DropdownMenu.Trigger>\n    <DropdownMenu.Content>\n        <DropdownMenu.Group>\n            <DropdownMenu.Label>Toggle columns</DropdownMenu.Label>\n            <DropdownMenu.Separator />\n            {#each table\n                .getAllColumns()\n                .filter((col) => typeof col.accessorFn !== 'undefined' && col.getCanHide()) as column (column)}\n                <DropdownMenu.CheckboxItem\n                    bind:checked={\n                        () => column.getIsVisible(),\n                        (v) => column.toggleVisibility(!!v)\n                    }\n                    class=\"capitalize\"\n                >\n                    {column.id}\n                </DropdownMenu.CheckboxItem>\n            {/each}\n        </DropdownMenu.Group>\n    </DropdownMenu.Content>\n</DropdownMenu.Root>\n",
			"type": "registry:file",
			"target": "data-grid/data-grid-column-visibility.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends RowData\">\n    import { type Snippet } from 'svelte';\n    import { type HTMLAttributes } from 'svelte/elements';\n    import {\n        type Column,\n        type ColumnDef,\n        type DeepKeys,\n        type FilterFnOption,\n        type RowData,\n        type Table,\n    } from '@tanstack/table-core';\n    import { renderSnippet } from '$lib/components/ui/data-table';\n    import * as DropdownMenu from '$lib/components/ui/dropdown-menu';\n    import { Button } from '$lib/components/ui/button';\n    import ArrowUpIcon from '@lucide/svelte/icons/arrow-up';\n    import ArrowDownIcon from '@lucide/svelte/icons/arrow-down';\n    import ChevronsUpDownIcon from '@lucide/svelte/icons/chevrons-up-down';\n    import EyeOffIcon from '@lucide/svelte/icons/eye-off';\n    import FunncelXIcon from '@lucide/svelte/icons/funnel-x';\n    import { cn } from '$UTILS$';\n    import { type DataTableContext } from './data-grid-context.svelte';\n\n    type Props = {\n        c: DataTableContext<T>;\n        property: DeepKeys<T>;\n        label?: string;\n        sortable?: 'Single' | 'Multi';\n        sort?: 'acs' | 'desc';\n        hideable?: boolean;\n        hidden?: boolean;\n        filterable?: boolean;\n        resizable?: boolean;\n        CellTemplate?: Snippet<[T]>;\n        filterFn?: FilterFnOption<T>;\n    };\n\n    let {\n        property,\n        c,\n        CellTemplate,\n        label,\n        sortable = undefined,\n        sort = undefined,\n        hideable = false,\n        hidden = false,\n        filterable = false,\n        resizable = false,\n        filterFn,\n    }: Props = $props();\n\n    if (sort) {\n        c.sorting.push({ id: property, desc: sort === 'desc' ? true : false });\n    }\n\n    c.columnVisibility[property] = !hidden;\n\n    $effect(() => {\n        const coldef: ColumnDef<T> = {\n            accessorKey: property,\n            enableSorting: sortable !== undefined,\n            enableMultiSort: sortable === 'Multi',\n            enableColumnFilter: filterable,\n            enableHiding: hideable,\n            enableResizing: resizable,\n            filterFn: filterFn,\n            header: ({ column, table }) =>\n                renderSnippet(ColumnHeader, {\n                    table,\n                    column,\n                    title: label ?? property,\n                }),\n        };\n\n        if (CellTemplate) {\n            coldef.cell = (info) =>\n                renderSnippet(CellTemplate, info.row.original);\n        } else {\n            coldef.cell = (info) => info.getValue();\n        }\n\n        c.columnDefMap.set(coldef.accessorKey.toString(), coldef);\n    });\n</script>\n\n{#snippet ColumnHeader({\n    table,\n    column,\n    title,\n    class: className,\n    ...restProps\n}: {\n    table: Table<T>;\n    column: Column<T>;\n    title: string;\n} & HTMLAttributes<HTMLDivElement>)}\n    {#if !column?.getCanSort()}\n        <div class={className} {...restProps}>\n            {title}\n        </div>\n    {:else}\n        <div class={cn('flex items-center', className)} {...restProps}>\n            <DropdownMenu.Root>\n                <DropdownMenu.Trigger>\n                    {#snippet child({ props })}\n                        <Button\n                            {...props}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            class=\"data-[state=open]:bg-accent -ml-3 h-8\"\n                        >\n                            <span>\n                                {title}\n                            </span>\n                            {#if column.getIsSorted() === 'desc'}\n                                <ArrowDownIcon />\n                            {:else if column.getIsSorted() === 'asc'}\n                                <ArrowUpIcon />\n                            {:else}\n                                <ChevronsUpDownIcon />\n                            {/if}\n                            {#if column.getIsSorted() && column.getSortIndex() !== -1 && table.options.meta?.showSortOrder}\n                                <span\n                                    class=\"flex items-center justify-center text-xs font-semibold text-muted-foreground\"\n                                >\n                                    {column.getSortIndex() + 1}\n                                </span>\n                            {/if}\n                        </Button>\n                    {/snippet}\n                </DropdownMenu.Trigger>\n                <DropdownMenu.Content align=\"start\">\n                    <DropdownMenu.Item\n                        onclick={() =>\n                            column.toggleSorting(\n                                false,\n                                column.getCanMultiSort()\n                            )}\n                    >\n                        <ArrowUpIcon\n                            class=\"text-muted-foreground/70 mr-2 size-3.5\"\n                        />\n                        Asc\n                    </DropdownMenu.Item>\n                    <DropdownMenu.Item\n                        onclick={() =>\n                            column.toggleSorting(\n                                true,\n                                column.getCanMultiSort()\n                            )}\n                    >\n                        <ArrowDownIcon\n                            class=\"text-muted-foreground/70 mr-2 size-3.5\"\n                        />\n                        Desc\n                    </DropdownMenu.Item>\n                    {#if column.getIsSorted()}\n                        <DropdownMenu.Item\n                            onclick={() => column.clearSorting()}\n                        >\n                            <FunncelXIcon\n                                class=\"text-muted-foreground/70 mr-2 size-3.5\"\n                            />\n                            Clear\n                        </DropdownMenu.Item>\n                    {/if}\n                    {#if column.getCanSort() && column.getCanHide()}\n                        <DropdownMenu.Separator />\n                    {/if}\n                    {#if column.getCanHide()}\n                        <DropdownMenu.Item\n                            onclick={() => column.toggleVisibility(false)}\n                        >\n                            <EyeOffIcon\n                                class=\"text-muted-foreground/70 mr-2 size-3.5\"\n                            />\n                            Hide\n                        </DropdownMenu.Item>\n                    {/if}\n                </DropdownMenu.Content>\n            </DropdownMenu.Root>\n        </div>\n    {/if}\n{/snippet}\n",
			"type": "registry:file",
			"target": "data-grid/property-column.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends object\">\n    import { type Snippet } from 'svelte';\n    import { type DataTableContext } from './data-grid-context.svelte';\n    import type { ColumnDef, Row, RowData } from '@tanstack/table-core';\n    import { renderSnippet } from '$lib/components/ui/data-table';\n\n    type Props<T extends object> = {\n        c: DataTableContext<T>;\n        CellTemplate: Snippet<[Row<T>]>;\n    };\n\n    let { c, CellTemplate }: Props<T> = $props();\n\n    $effect(() => {\n        const coldef: ColumnDef<T> = {\n            id: 'action',\n            header: undefined,\n            cell: (info) => renderSnippet(CellTemplate, info.row),\n            enableSorting: false,\n            enableHiding: false,\n            meta: 'flex justify-end',\n        };\n\n        c.columnDefMap.set(coldef.id, coldef);\n    });\n</script>\n",
			"type": "registry:file",
			"target": "data-grid/action-column.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T extends object\">\n    import { renderComponent } from '$lib/components/ui/data-table';\n    import { Checkbox } from '$lib/components/ui/checkbox';\n    import { type DataTableContext } from './data-grid-context.svelte';\n    import type { ColumnDef } from '@tanstack/table-core';\n\n    type Props<T extends object> = {\n        c: DataTableContext<T>;\n    };\n\n    let { c }: Props<T> = $props();\n\n    $effect(() => {\n        const coldef: ColumnDef<T> = {\n            id: 'select',\n            header: ({ table }) =>\n                renderComponent(Checkbox, {\n                    checked: table.getIsAllPageRowsSelected(),\n                    onCheckedChange: (value) =>\n                        table.toggleAllPageRowsSelected(value),\n                    indeterminate:\n                        table.getIsSomePageRowsSelected() &&\n                        !table.getIsAllPageRowsSelected(),\n                    'aria-label': 'Select all',\n                }),\n            cell: ({ row }) =>\n                renderComponent(Checkbox, {\n                    checked: row.getIsSelected(),\n                    onCheckedChange: (value) => row.toggleSelected(value),\n                    'aria-label': 'Select row',\n                }),\n            enableSorting: false,\n            enableHiding: false,\n        };\n\n        c.columnDefMap.set(coldef.id, coldef);\n    });\n</script>\n",
			"type": "registry:file",
			"target": "data-grid/select-column.svelte"
		}
	]
}
{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "password",
	"type": "registry:ui",
	"dependencies": [
		"svelte-toolbelt",
		"@zxcvbn-ts/core",
		"@zxcvbn-ts/language-common",
		"@zxcvbn-ts/language-en",
		"bits-ui"
	],
	"devDependencies": [
		"tailwind-variants@^3.1.1",
		"bits-ui@^2.11.3",
		"@internationalized/date@^3.9.0",
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"./copy-button.json",
		"input"
	],
	"files": [
		{
			"content": "import Root from './password.svelte';\nimport Input from './password-input.svelte';\nimport Strength from './password-strength.svelte';\nimport Copy from './password-copy.svelte';\nimport ToggleVisibility from './password-toggle-visibility.svelte';\n\nexport { Root, Input, Strength, Copy, ToggleVisibility };\n",
			"type": "registry:file",
			"target": "password/index.ts"
		},
		{
			"content": "<script lang=\"ts\">\n    import { CopyButton } from '$UI$/copy-button';\n    import { cn } from '$UTILS$.js';\n    import { usePasswordCopy } from './password.svelte.js';\n    import type { PasswordCopyButtonProps } from './types.js';\n\n    let {\n        ref = $bindable(null),\n        class: className,\n        ...rest\n    }: PasswordCopyButtonProps = $props();\n\n    const state = usePasswordCopy();\n</script>\n\n<CopyButton\n    {...rest}\n    bind:ref\n    text={state.root.passwordState.value}\n    tabindex={-1}\n    class={cn(\n        'text-muted-foreground absolute top-1/2 right-0 size-9 min-w-0 -translate-y-1/2 hover:!bg-transparent',\n        className\n    )}\n/>\n",
			"type": "registry:file",
			"target": "password/password-copy.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { cn } from '$UTILS$';\n\timport { box, mergeProps } from 'svelte-toolbelt';\n\timport { usePasswordInput } from './password.svelte.js';\n\timport type { PasswordInputProps } from './types.js';\n\timport { Input } from '$lib/components/ui/input';\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tvalue = $bindable(''),\n\t\tclass: className,\n\t\tchildren,\n\t\t...rest\n\t}: PasswordInputProps = $props();\n\n\tconst state = usePasswordInput({\n\t\tvalue: box.with(\n\t\t\t() => value,\n\t\t\t(v) => (value = v)\n\t\t),\n\t\tref: box.with(() => ref)\n\t});\n\n\tconst mergedProps = $derived(mergeProps(rest, state.props));\n</script>\n\n<div class=\"relative\">\n\t<Input\n\t\t{...mergedProps}\n\t\tbind:value\n\t\tbind:ref\n\t\ttype={state.root.opts.hidden.current ? 'password' : 'text'}\n\t\tclass={cn(\n\t\t\t'transition-all',\n\t\t\t{\n\t\t\t\t// either or is mounted (offset 36px)\n\t\t\t\t'pr-9': state.root.passwordState.copyMounted || state.root.passwordState.toggleMounted,\n\t\t\t\t// both are mounted (offset 36px * 2)\n\t\t\t\t'pr-[4.5rem]':\n\t\t\t\t\tstate.root.passwordState.copyMounted && state.root.passwordState.toggleMounted\n\t\t\t},\n\t\t\tclassName\n\t\t)}\n\t/>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:file",
			"target": "password/password-input.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { tv } from 'tailwind-variants';\n\timport { usePasswordStrength } from './password.svelte.js';\n\timport type { PasswordStrengthProps } from './types.js';\n\timport { Meter } from 'bits-ui';\n\timport { cn } from '$UTILS$.js';\n\n\tlet { strength = $bindable(), class: className }: PasswordStrengthProps = $props();\n\n\tconst state = usePasswordStrength();\n\n\tconst score = $derived(state.strength.score);\n\n\t$effect(() => {\n\t\tstrength = state.strength;\n\t});\n\n\tconst color = tv({\n\t\tbase: '',\n\t\tvariants: {\n\t\t\tscore: {\n\t\t\t\t0: 'bg-red-500',\n\t\t\t\t1: 'bg-red-500',\n\t\t\t\t2: 'bg-yellow-500',\n\t\t\t\t3: 'bg-yellow-500',\n\t\t\t\t4: 'bg-green-500'\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<Meter.Root\n\tvalue={state.strength.score}\n\tclass={cn('bg-accent relative h-[6px] w-full gap-1 overflow-hidden rounded-full', className)}\n\tmin={0}\n\tmax={4}\n>\n\t<div\n\t\tclass={cn('h-full transition-all duration-500', color({ score }))}\n\t\tstyle=\"width: {(score / 4) * 100}%;\"\n\t></div>\n\t<!-- This creates the gaps between the bars -->\n\t<div class=\"absolute top-0 left-0 z-10 flex h-[6px] w-full place-items-center gap-1\">\n\t\t{#each Array.from({ length: 4 }) as _, i (i)}\n\t\t\t<div class=\"ring-background h-[6px] w-1/4 rounded-full ring-3\"></div>\n\t\t{/each}\n\t</div>\n</Meter.Root>\n",
			"type": "registry:file",
			"target": "password/password-strength.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { Toggle } from '$lib/components/ui/toggle';\n\timport EyeIcon from '@lucide/svelte/icons/eye';\n\timport EyeOffIcon from '@lucide/svelte/icons/eye-off';\n\timport { usePasswordToggleVisibility } from './password.svelte.js';\n\timport type { PasswordToggleVisibilityProps } from './types.js';\n\timport { cn } from '$UTILS$.js';\n\n\tlet { ref = $bindable(null), class: className }: PasswordToggleVisibilityProps = $props();\n\n\tconst state = usePasswordToggleVisibility();\n</script>\n\n<Toggle\n\tbind:ref\n\taria-label={state.root.opts.hidden.current ? 'Show password' : 'Hide password'}\n\tbind:pressed={state.root.opts.hidden.current}\n\tclass={cn(\n\t\t'data-[state=off]:text-muted-foreground data-[state=on]:text-muted-foreground hover:data-[state=off]:text-accent-foreground hover:data-[state=on]:text-accent-foreground absolute top-1/2 right-0 size-9 min-w-0 -translate-y-1/2 p-0 hover:!bg-transparent data-[state=on]:bg-transparent',\n\t\t{\n\t\t\t'right-9 max-w-6': state.root.passwordState.copyMounted\n\t\t},\n\t\tclassName\n\t)}\n\ttabindex={-1}\n>\n\t{#if state.root.opts.hidden.current}\n\t\t<EyeIcon class=\"size-4\" />\n\t{:else}\n\t\t<EyeOffIcon class=\"size-4\" />\n\t{/if}\n</Toggle>\n",
			"type": "registry:file",
			"target": "password/password-toggle-visibility.svelte"
		},
		{
			"content": "<script lang=\"ts\">\n\timport { box } from 'svelte-toolbelt';\n\timport { usePassword } from './password.svelte.js';\n\timport type { PasswordRootProps } from './types';\n\timport { cn } from '$UTILS$.js';\n\n\tlet {\n\t\tref = $bindable(null),\n\t\thidden = $bindable(true),\n\t\tminScore = 3,\n\t\tclass: className,\n\t\tchildren\n\t}: PasswordRootProps = $props();\n\n\tusePassword({\n\t\thidden: box.with(\n\t\t\t() => hidden,\n\t\t\t(v) => (hidden = v)\n\t\t),\n\t\tminScore: box.with(() => minScore)\n\t});\n</script>\n\n<div bind:this={ref} class={cn('flex flex-col gap-2', className)}>\n\t{@render children?.()}\n</div>\n",
			"type": "registry:file",
			"target": "password/password.svelte"
		},
		{
			"content": "import { Context, watch } from 'runed';\nimport type { ReadableBoxedValues, WritableBoxedValues } from 'svelte-toolbelt';\nimport { zxcvbn, zxcvbnOptions } from '@zxcvbn-ts/core';\nimport * as zxcvbnCommonPackage from '@zxcvbn-ts/language-common';\nimport * as zxcvbnEnPackage from '@zxcvbn-ts/language-en';\n\nconst passwordOptions = {\n\ttranslations: zxcvbnEnPackage.translations,\n\tgraphs: zxcvbnCommonPackage.adjacencyGraphs,\n\tdictionary: {\n\t\t...zxcvbnCommonPackage.dictionary,\n\t\t...zxcvbnEnPackage.dictionary\n\t}\n};\n\nzxcvbnOptions.setOptions(passwordOptions);\n\ntype PasswordRootStateProps = WritableBoxedValues<{\n\thidden: boolean;\n}> &\n\tReadableBoxedValues<{\n\t\tminScore: number;\n\t}>;\n\ntype PasswordState = {\n\tvalue: string;\n\tcopyMounted: boolean;\n\ttoggleMounted: boolean;\n\tstrengthMounted: boolean;\n\ttainted: boolean;\n};\n\nconst defaultPasswordState: PasswordState = {\n\tvalue: '',\n\tcopyMounted: false,\n\ttoggleMounted: false,\n\tstrengthMounted: false,\n\ttainted: false\n};\n\nclass PasswordRootState {\n\tpasswordState = $state(defaultPasswordState);\n\n\tconstructor(readonly opts: PasswordRootStateProps) { }\n\n\t// only re-run when the password changes\n\tstrength = $derived.by(() => zxcvbn(this.passwordState.value));\n}\n\ntype PasswordInputStateProps = WritableBoxedValues<{\n\tvalue: string;\n}> &\n\tReadableBoxedValues<{\n\t\tref: HTMLInputElement | null;\n\t}>;\n\nclass PasswordInputState {\n\tconstructor(\n\t\treadonly root: PasswordRootState,\n\t\treadonly opts: PasswordInputStateProps\n\t) {\n\t\twatch(\n\t\t\t() => this.opts.value.current,\n\t\t\t() => {\n\t\t\t\tif (this.root.passwordState.value !== this.opts.value.current) {\n\t\t\t\t\tthis.root.passwordState.tainted = true;\n\t\t\t\t\tthis.root.passwordState.value = this.opts.value.current;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t$effect(() => {\n\t\t\tif (!this.root.passwordState.strengthMounted) return;\n\n\t\t\t// if the password is empty, we let the `required` attribute handle the validation\n\t\t\tif (\n\t\t\t\tthis.root.passwordState.value !== '' &&\n\t\t\t\tthis.root.strength.score < this.root.opts.minScore.current\n\t\t\t) {\n\t\t\t\tthis.opts.ref.current?.setCustomValidity('Password is too weak');\n\t\t\t} else {\n\t\t\t\tthis.opts.ref.current?.setCustomValidity('');\n\t\t\t}\n\t\t});\n\t}\n\n\t// This isn't very useful when in a form and want to set this when field is invalid\n\t// props = $derived.by(() => ({\n\t// \t'aria-invalid':\n\t// \t\tthis.root.strength.score < this.root.opts.minScore.current &&\n\t// \t\tthis.root.passwordState.tainted &&\n\t// \t\tthis.root.passwordState.strengthMounted\n\t// }));\n}\n\nclass PasswordToggleVisibilityState {\n\tconstructor(readonly root: PasswordRootState) {\n\t\tthis.root.passwordState.toggleMounted = true;\n\n\t\t// this way we go back to the correct padding when toggle is unmounted\n\t\t$effect(() => {\n\t\t\treturn () => {\n\t\t\t\tthis.root.passwordState.toggleMounted = false;\n\t\t\t};\n\t\t});\n\t}\n}\n\nclass PasswordCopyState {\n\tconstructor(readonly root: PasswordRootState) {\n\t\tthis.root.passwordState.copyMounted = true;\n\n\t\t// this way we go back to the correct padding when copy is unmounted\n\t\t$effect(() => {\n\t\t\treturn () => {\n\t\t\t\tthis.root.passwordState.copyMounted = false;\n\t\t\t};\n\t\t});\n\t}\n}\n\nclass PasswordStrengthState {\n\tconstructor(readonly root: PasswordRootState) {\n\t\tthis.root.passwordState.strengthMounted = true;\n\n\t\t$effect(() => {\n\t\t\treturn () => {\n\t\t\t\tthis.root.passwordState.strengthMounted = false;\n\t\t\t};\n\t\t});\n\t}\n\n\tget strength() {\n\t\treturn this.root.strength;\n\t}\n}\n\nconst ctx = new Context<PasswordRootState>('password-root-state');\n\nexport function usePassword(props: PasswordRootStateProps) {\n\treturn ctx.set(new PasswordRootState(props));\n}\n\nexport function usePasswordInput(props: PasswordInputStateProps) {\n\treturn new PasswordInputState(ctx.get(), props);\n}\n\nexport function usePasswordToggleVisibility() {\n\treturn new PasswordToggleVisibilityState(ctx.get());\n}\n\nexport function usePasswordCopy() {\n\treturn new PasswordCopyState(ctx.get());\n}\n\nexport function usePasswordStrength() {\n\treturn new PasswordStrengthState(ctx.get());\n}\n",
			"type": "registry:file",
			"target": "password/password.svelte.ts"
		},
		{
			"content": "import type {\n\tWithChildren,\n\tWithoutChildren,\n\tMeter as MeterPrimitive,\n\tToggle as TogglePrimitive\n} from 'bits-ui';\nimport type { HTMLAttributes, HTMLInputAttributes } from 'svelte/elements';\nimport type { CopyButtonProps } from '$UI$/copy-button/types';\nimport type { ZxcvbnResult } from '@zxcvbn-ts/core';\n\nexport type PasswordRootPropsWithoutHTML = WithChildren<{\n\tref?: HTMLDivElement | null;\n\thidden?: boolean;\n\t/** The minimum acceptable score for a password. (0-4)\n\t *\n\t * @default 3\n\t */\n\tminScore?: 0 | 1 | 2 | 3 | 4;\n}>;\n\nexport type PasswordRootProps = WithoutChildren<HTMLAttributes<HTMLDivElement>> &\n\tPasswordRootPropsWithoutHTML;\n\nexport type PasswordInputPropsWithoutHTML = WithChildren<{\n\tref?: HTMLInputElement | null;\n\tvalue?: string;\n}>;\n\nexport type PasswordInputProps = Omit<\n\tWithoutChildren<HTMLInputAttributes>,\n\t'type' | 'files' | 'value'\n> &\n\tPasswordInputPropsWithoutHTML;\n\nexport type PasswordToggleVisibilityProps = Omit<\n\tTogglePrimitive.RootProps,\n\t'children' | 'pressed' | 'aria-label' | 'tabindex'\n>;\n\nexport type PasswordCopyButtonProps = Omit<CopyButtonProps, 'children' | 'text'>;\n\nexport type PasswordStrengthPropsWithoutHTML = {\n\tstrength?: ZxcvbnResult;\n};\n\nexport type PasswordStrengthProps = PasswordStrengthPropsWithoutHTML &\n\tWithoutChildren<MeterPrimitive.RootProps>;\n",
			"type": "registry:file",
			"target": "password/types.ts"
		}
	]
}
{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "radio-field",
	"type": "registry:ui",
	"devDependencies": [
		"bits-ui@^2.11.3",
		"@internationalized/date@^3.9.0"
	],
	"registryDependencies": [
		"./generic-field.json",
		"radio-group"
	],
	"files": [
		{
			"content": "export { default as RadioInput } from './radio-input.svelte';",
			"type": "registry:file",
			"target": "radio-field/index.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"T\">\n    import * as RadioGroup from '$lib/components/ui/radio-group';\n    import type { BaseInputProps } from '$UI$/form';\n    import { GenericInput } from '$UI$/form-fields/generic-field';\n    import { cn } from '$UTILS$';\n    import { RadioGroup as RadioGroupPrimitive } from 'bits-ui';\n\n    let {\n        property,\n        context,\n        ref = $bindable(null),\n        class: className,\n        children,\n        itemClass,\n        ...restProps\n    }: BaseInputProps<T> & RadioGroupPrimitive.RootProps = $props();\n</script>\n\n<GenericInput\n    {property}\n    {context}\n    {...restProps}\n    itemClass={cn('space-y-3', itemClass)}\n>\n    {#snippet control(field)}\n        <RadioGroup.Root\n            bind:ref\n            bind:value={() => field.state.value, (e) => field.handleChange(e)}\n            name={field.name}\n            id={field.name}\n            onblur={field.handleBlur}\n            class={className}\n            aria-invalid={field.state.meta.isValid ? undefined : 'true'}\n            {...restProps}\n        >\n            {@render children?.()}\n        </RadioGroup.Root>\n    {/snippet}\n</GenericInput>\n",
			"type": "registry:file",
			"target": "radio-field/radio-input.svelte"
		}
	]
}
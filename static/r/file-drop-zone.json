{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "file-drop-zone",
	"type": "registry:ui",
	"dependencies": [
		"bits-ui"
	],
	"devDependencies": [
		"bits-ui@^2.11.3",
		"@internationalized/date@^3.9.0",
		"@lucide/svelte@^0.544.0"
	],
	"registryDependencies": [
		"button"
	],
	"files": [
		{
			"content": "import FileDropZone from './file-drop-zone.svelte';\nimport { type FileRejectedReason, type FileDropZoneProps } from './types';\n\nexport const displaySize = (bytes: number): string => {\n\tif (bytes < KILOBYTE) return `${bytes.toFixed(0)} B`;\n\n\tif (bytes < MEGABYTE) return `${(bytes / KILOBYTE).toFixed(0)} KB`;\n\n\tif (bytes < GIGABYTE) return `${(bytes / MEGABYTE).toFixed(0)} MB`;\n\n\treturn `${(bytes / GIGABYTE).toFixed(0)} GB`;\n};\n\n// Utilities for working with file sizes\nexport const BYTE = 1;\nexport const KILOBYTE = 1024;\nexport const MEGABYTE = 1024 * KILOBYTE;\nexport const GIGABYTE = 1024 * MEGABYTE;\n\n// utilities for limiting accepted files\nexport const ACCEPT_IMAGE = 'image/*';\nexport const ACCEPT_VIDEO = 'video/*';\nexport const ACCEPT_AUDIO = 'audio/*';\n\nexport { FileDropZone, type FileRejectedReason, type FileDropZoneProps };\n",
			"type": "registry:file",
			"target": "file-drop-zone/index.ts"
		},
		{
			"content": "<script lang=\"ts\">\n    import { cn } from '$UTILS$';\n    import { displaySize } from '.';\n    import { useId } from 'bits-ui';\n    import type { FileDropZoneProps, FileRejectedReason } from './types';\n    import Paperclip from '@lucide/svelte/icons/paperclip';\n    import Trash2 from '@lucide/svelte/icons/trash-2';\n    import UploadIcon from '@lucide/svelte/icons/upload';\n    import { fly, slide } from 'svelte/transition';\n    import { Button } from '$lib/components/ui/button';\n\n    let {\n        id = useId(),\n        children,\n        maxFiles,\n        maxFileSize,\n        fileCount,\n        disabled = false,\n        onUpload,\n        onFileRejected,\n        accept,\n        class: className,\n        ...rest\n    }: FileDropZoneProps = $props();\n\n    if (maxFiles !== undefined && fileCount === undefined) {\n        console.warn(\n            'Make sure to provide FileDropZone with `fileCount` when using the `maxFiles` prompt'\n        );\n    }\n\n    let uploading = $state(false);\n    let files_file: File[] = $state([]);\n\n    const drop = async (\n        e: DragEvent & {\n            currentTarget: EventTarget & HTMLLabelElement;\n        }\n    ) => {\n        if (disabled || !canUploadFiles) return;\n\n        e.preventDefault();\n\n        const droppedFiles = Array.from(e.dataTransfer?.files ?? []);\n\n        await upload([...files_file, ...droppedFiles]);\n    };\n\n    const change = async (\n        e: Event & {\n            currentTarget: EventTarget & HTMLInputElement;\n        }\n    ) => {\n        if (disabled) return;\n\n        const selectedFiles = e.currentTarget.files;\n\n        if (!selectedFiles) return;\n\n        await upload([...files_file, ...selectedFiles]);\n\n        (e.target as HTMLInputElement).value = '';\n    };\n\n    const shouldAcceptFile = (\n        file: File,\n        fileNumber: number\n    ): FileRejectedReason | undefined => {\n        if (maxFileSize !== undefined && file.size > maxFileSize)\n            return 'Maximum file size exceeded';\n\n        if (maxFiles !== undefined && fileNumber > maxFiles)\n            return 'Maximum files uploaded';\n\n        if (!accept) return undefined;\n\n        const acceptedTypes = accept\n            .split(',')\n            .map((a) => a.trim().toLowerCase());\n        const fileType = file.type.toLowerCase();\n        const fileName = file.name.toLowerCase();\n\n        const isAcceptable = acceptedTypes.some((pattern) => {\n            // check extension like .mp4\n            if (fileType.startsWith('.')) {\n                return fileName.endsWith(pattern);\n            }\n\n            // if pattern has wild card like video/*\n            if (pattern.endsWith('/*')) {\n                const baseType = pattern.slice(0, pattern.indexOf('/*'));\n                return fileType.startsWith(baseType + '/');\n            }\n\n            // otherwise it must be a specific type like video/mp4\n            return fileType === pattern;\n        });\n\n        if (!isAcceptable) return 'File type not allowed';\n\n        return undefined;\n    };\n\n    const upload = async (uploadFiles: File[]) => {\n        uploading = true;\n\n        const validFiles: File[] = [];\n\n        for (let i = 0; i < uploadFiles.length; i++) {\n            const file = uploadFiles[i];\n\n            const rejectedReason = shouldAcceptFile(\n                file,\n                (fileCount ?? 0) + i + 1\n            );\n\n            if (rejectedReason) {\n                onFileRejected?.({ file, reason: rejectedReason });\n                continue;\n            }\n\n            validFiles.push(file);\n        }\n\n        files_file = validFiles;\n        await onUpload(validFiles);\n\n        uploading = false;\n    };\n\n    const canUploadFiles = $derived(\n        !disabled &&\n            !uploading &&\n            !(\n                maxFiles !== undefined &&\n                fileCount !== undefined &&\n                fileCount >= maxFiles\n            )\n    );\n\n    function RemoveFile(index: number) {\n        // files_file.set([\n        //     ...Array.from($files_file).slice(0, i),\n        //     ...Array.from($files_file).slice(i + 1),\n        // ]);\n        upload(files_file.toSpliced(index, 1));\n    }\n</script>\n\n<label\n    ondragover={(e) => e.preventDefault()}\n    ondrop={drop}\n    for={id}\n    aria-disabled={!canUploadFiles}\n    class={cn(\n        'border-border hover:bg-accent/25 flex h-48 w-full place-items-center justify-center rounded-lg border-2 border-dashed p-6 transition-all hover:cursor-pointer aria-disabled:opacity-50 aria-disabled:hover:cursor-not-allowed',\n        className\n    )}\n>\n    {#if children}\n        {@render children()}\n    {:else}\n        <div class=\"flex flex-col place-items-center justify-center gap-2\">\n            <div\n                class=\"border-border text-muted-foreground flex size-14 place-items-center justify-center rounded-full border border-dashed\"\n            >\n                <UploadIcon class=\"size-7\" />\n            </div>\n            <div class=\"flex flex-col gap-0.5 text-center\">\n                <span class=\"text-muted-foreground font-medium\">\n                    Drag 'n' drop files here, or click to select files\n                </span>\n                {#if maxFiles || maxFileSize}\n                    <span class=\"text-muted-foreground/75 text-sm\">\n                        {#if maxFiles}\n                            <span>You can upload {maxFiles} files</span>\n                        {/if}\n                        {#if maxFiles && maxFileSize}\n                            <span>(up to {displaySize(maxFileSize)} each)</span>\n                        {/if}\n                        {#if maxFileSize && !maxFiles}\n                            <span>Maximum size {displaySize(maxFileSize)}</span>\n                        {/if}\n                    </span>\n                {/if}\n            </div>\n        </div>\n    {/if}\n    <input\n        {...rest}\n        disabled={!canUploadFiles}\n        {id}\n        {accept}\n        multiple={maxFiles === undefined || maxFiles - (fileCount ?? 0) > 1}\n        type=\"file\"\n        onchange={change}\n        class=\"hidden\"\n    />\n</label>\n<div class=\"flex flex-col\">\n    {#each files_file as file, i (file.name)}\n        <div\n            in:slide\n            out:fly={{ x: 20 }}\n            class=\"flex place-items-center justify-between gap-0.5 hover:bg-accent dark:hover:bg-accent/60 p-2 rounded-lg transition-all duration-200\"\n        >\n            <div class=\"flex gap-2 items-center\">\n                <div>\n                    <Paperclip />\n                </div>\n                <div class=\"flex flex-col\">\n                    <span class=\"text-sm\">{file.name}</span>\n                    <span class=\"text-xs text-muted-foreground\"\n                        >{displaySize(file.size)}</span\n                    >\n                </div>\n            </div>\n            <Button\n                variant=\"outline\"\n                size=\"icon\"\n                class=\"hover:text-primary text-muted-foreground\"\n                onclick={() => RemoveFile(i)}\n            >\n                <Trash2 />\n            </Button>\n        </div>\n    {/each}\n</div>\n",
			"type": "registry:file",
			"target": "file-drop-zone/file-drop-zone.svelte"
		},
		{
			"content": "import type { WithChildren } from 'bits-ui';\nimport type { HTMLInputAttributes } from 'svelte/elements';\n\nexport type FileRejectedReason =\n\t| 'Maximum file size exceeded'\n\t| 'File type not allowed'\n\t| 'Maximum files uploaded';\n\nexport type FileDropZonePropsWithoutHTML = WithChildren<{\n\tref?: HTMLInputElement | null;\n\t/** Called with the uploaded files when the user drops or clicks and selects their files.\n\t *\n\t * @param files\n\t */\n\tonUpload: (files: File[]) => Promise<void>;\n\t/** The maximum amount files allowed to be uploaded */\n\tmaxFiles?: number;\n\tfileCount?: number;\n\t/** The maximum size of a file in bytes */\n\tmaxFileSize?: number;\n\t/** Called when a file does not meet the upload criteria (size, or type) */\n\tonFileRejected?: (opts: { reason: FileRejectedReason; file: File }) => void;\n\n\t// just for extra documentation\n\t/** Takes a comma separated list of one or more file types.\n\t *\n\t *  [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)\n\t *\n\t * ### Usage\n\t * ```svelte\n\t * <FileDropZone\n\t * \t\taccept=\".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n\t * />\n\t * ```\n\t *\n\t * ### Common Values\n\t * ```svelte\n\t * <FileDropZone accept=\"audio/*\"/>\n\t * <FileDropZone accept=\"image/*\"/>\n\t * <FileDropZone accept=\"video/*\"/>\n\t * ```\n\t */\n\taccept?: string;\n}>;\n\nexport type FileDropZoneProps = FileDropZonePropsWithoutHTML &\n\tOmit<HTMLInputAttributes, 'multiple' | 'files'>;\n",
			"type": "registry:file",
			"target": "file-drop-zone/types.ts"
		}
	]
}